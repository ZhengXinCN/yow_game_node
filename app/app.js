// Generated by CoffeeScript 1.4.0
var assetize_javascript_for_requirejs, server;

assetize_javascript_for_requirejs = function(assets) {
  var asset_css_path, asset_js_path, file, stripExt, _;
  file = require("file");
  _ = require("underscore");
  stripExt = function(filePath) {
    var lastDotIndex;
    if ((lastDotIndex = filePath.lastIndexOf('.')) >= 0) {
      return filePath.slice(0, lastDotIndex);
    } else {
      return filePath;
    }
  };
  asset_js_path = "" + (process.cwd()) + "/assets/js/";
  asset_css_path = "" + (process.cwd()) + "/assets/css/";
  file.walkSync(asset_js_path, function(dirPath, dirs, files) {
    if (files != null) {
      files.map(_.compose(assets.instance.options.helperContext.js, stripExt));
    }
    return true;
  });
  return file.walkSync(asset_css_path, function(dirPath, dirs, files) {
    if (files != null) {
      files.map(_.compose(assets.instance.options.helperContext.css, stripExt));
    }
    return true;
  });
};

server = function(options) {
  var GoogleStrategy, app, assets, ensureAdministrator, ensureAuthenticated, express, passport, resource, stylus, timestamp, _;
  express = require('express');
  stylus = require('stylus');
  assets = require('connect-assets');
  passport = require('passport');
  GoogleStrategy = require('passport-google').Strategy;
  resource = require('express-resource');
  _ = require("underscore");
  timestamp = Date.now();
  passport.serializeUser(function(user, done) {
    return done(null, user);
  });
  passport.deserializeUser(function(obj, done) {
    return done(null, obj);
  });
  passport.use(new GoogleStrategy({
    returnURL: "" + options.secure_realm + "auth/google/return",
    realm: "" + options.secure_realm
  }, function(identifier, profile, done) {
    return process.nextTick(function() {
      profile.identifier = identifier;
      return done(null, profile);
    });
  }));
  ensureAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
      return next();
    }
    return res.send(401, 'Please authenticate <a href="' + options.secure_realm + 'auth/google">here</a>');
  };
  ensureAdministrator = function(req, res, next) {
    var isThoughtWorker, _ref;
    isThoughtWorker = _.chain(((_ref = req.user) != null ? _ref.emails : void 0) || []).pluck('value').any(function(email) {
      return /@thoughtworks.com$/.test(email);
    }).value();
    if (isThoughtWorker) {
      return next();
    }
    return res.send(403, 'Please contact the administrator for access');
  };
  app = express();
  app.use(express.cookieParser());
  app.use(express.session({
    secret: "wibble wobbly"
  }));
  app.use(assets());
  assetize_javascript_for_requirejs(assets);
  app.use(express["static"](process.cwd() + '/public'));
  app.use(express.bodyParser());
  app.use(passport.initialize());
  app.use(passport.session());
  app.set('view engine', 'jade');
  app.get('/', function(req, resp) {
    return resp.render('index');
  });
  app.get('/about', function(req, resp) {
    return resp.render('about');
  });
  app.get('/terms', function(req, resp) {
    return resp.render('terms');
  });
  app.get('/data', function(req, resp) {
    var json;
    json = require('../data/techradar.json');
    resp.contentType('text/json');
    return resp.send(json);
  });
  app.get('/game.appcache', function(req, resp) {
    resp.contentType("text/cache-manifest");
    return resp.render('appcache', {
      now: timestamp
    });
  });
  app.get('/auth/google', passport.authenticate('google', {
    failureRedirect: '/login'
  }), function(req, res) {
    return res.redirect('/~');
  });
  app.get('/auth/google/return', passport.authenticate('google', {
    failureRedirect: '/login'
  }), function(req, res) {
    return res.redirect('/~');
  });
  app.get('/~', ensureAuthenticated, function(req, res) {
    return res.send("Hi me");
  });
  app.get('/login', function(req, res) {
    return res.render('login');
  });
  app.get('/punters.:format?', ensureAuthenticated);
  app.get('/punters.:format?', ensureAdministrator);
  app.resource('punters', require('./punter').resource(options));
  return app;
};

exports.server = server;
