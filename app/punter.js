// Generated by CoffeeScript 1.4.0
var Promise, Schema, mongoose, resource, _;

mongoose = require('mongoose');

require('express-mongoose');

Promise = mongoose.Promise;

require('./mongoose-pipe');

_ = require('underscore');

RegExp.prototype.bindMember = function(name) {
  return this[name].bind(this);
};

Schema = mongoose.Schema;

resource = function(options) {
  var GameSchema, NoModelFound, PunterModel, PunterSchema, allow, create, db, firstModel, hasInvalidModelKey, index, invalidModelKey, load, show;
  db = options.db;
  if (!db) {
    console.log("Skipping punters");
    return {};
  }
  console.log("Constructing schema");
  GameSchema = new Schema({
    score: {
      type: Number,
      "default": 0
    },
    timestamp: {
      type: Date,
      "default": Date.now
    }
  });
  PunterSchema = new Schema({
    fullName: {
      type: String,
      required: true
    },
    company: {
      type: String,
      required: true
    },
    role: {
      type: String,
      required: true
    },
    emailAddress: String,
    game: [GameSchema]
  });
  PunterSchema.virtual('score').get(function() {
    var _ref, _ref1, _ref2;
    return (_ref = (_ref1 = this.game) != null ? (_ref2 = _ref1[0]) != null ? _ref2.score : void 0 : void 0) != null ? _ref : null;
  });
  PunterSchema.virtual('scoreTime').get(function() {
    var _ref, _ref1, _ref2;
    return (_ref = (_ref1 = this.game) != null ? (_ref2 = _ref1[0]) != null ? _ref2.timestamp : void 0 : void 0) != null ? _ref : null;
  });
  PunterModel = db.model("punters", PunterSchema);
  NoModelFound = new Promise().error('No model found');
  firstModel = function(arr) {
    return (arr != null ? arr[0] : void 0) || NoModelFound;
  };
  invalidModelKey = /^_/.bindMember('test');
  hasInvalidModelKey = function(body) {
    return _.chain(body).keys().any(invalidModelKey).value();
  };
  allow = function(req, res, next) {
    return next();
  };
  load = function(id, next) {
    return PunterModel.find({
      _id: id
    }).exec().pipe(firstModel).addBack(next);
  };
  show = function(req, resp) {
    if (req.punter) {
      return resp.send(200, req.punter);
    } else {
      return resp.send(404, {
        message: "No model found"
      });
    }
  };
  index = {
    csv: function(req, res) {
      var docStream;
      res.header('content-type', 'text/csv');
      res.header('content-disposition', 'attachment; filename=report.csv');
      res.write("Email, Full Name, Company, Role, Score, Time\r\n");
      docStream = PunterModel.find().sort({
        scoreTime: -1
      }).stream();
      docStream.on('data', function(doc) {
        return res.write("" + doc.emailAddress + "," + doc.fullName + "," + doc.company + "," + doc.role + "," + doc.score + "," + doc.scoreTime + "\r\n");
      });
      return docStream.on('close', function() {
        return res.end();
      });
    }
  };
  create = function(req, resp) {
    var promise, punter;
    if (!req.body) {
      return resp.send(400, 'No content');
    }
    if (hasInvalidModelKey(req.body)) {
      return resp.send(400, 'Invalid model');
    }
    punter = new PunterModel(req.body);
    promise = new Promise();
    promise.pipe(function(p) {
      return resp.redirect("" + req.url + "/" + p._id);
    }, function(err) {
      return resp.send(400, err);
    });
    return punter.save(promise.resolver());
  };
  return resource = {
    load: load,
    show: show,
    create: create,
    index: index
  };
};

exports.resource = resource;
